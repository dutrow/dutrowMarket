<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>dutrowSales</artifactId>
		<groupId>dutrow.dutrowSales</groupId>
		<version>2.1-SNAPSHOT</version>
	</parent>

	<artifactId>dutrowSalesImpl</artifactId>

	<name>dutrowSalesImpl</name>
	<description>
        This is the implementation of the dutrowSales application
    </description>

	<properties>
		<jms.host>localhost</jms.host>
		<jndi.host>${jms.host}</jndi.host>
		<hornetq.remoting.netty.host>${jms.host}</hornetq.remoting.netty.host>
		<!-- set -Djms.spawn=false to run server in foreground. Requires 2 windows. -->
		<jms.spawn>true</jms.spawn>

		<!-- Ant script designed to reference a built classpath into M2_REPO or 
			a directory of .jar files in target/dependencies. * set to build-classpath 
			to save time/space (~25-30MB) * set to copy-dependencies if generated classpath 
			too long (~many K chars) Switch between them by using -Djms.classpath=(goal) -->
		<jms.classpath>build-classpath</jms.classpath>
	</properties>

	<dependencies>
		<dependency>
			<groupId>ejava.javaee.projects.eMarket</groupId>
			<artifactId>eSalesTestUtil</artifactId>
			<version>3.0.2013.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.jms</groupId>
			<artifactId>jms</artifactId>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- see http://groups.yahoo.com/group/ejava_class/message/15981 org.hibernate.common:hibernate-commons-annotations:jar:4.0.1.Final:test -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>4.0.1.Final</version>
			<scope>provided</scope>
		</dependency>
		<!-- brings in JBoss RMI dependencies -->
		<dependency>
			<groupId>ejava.common</groupId>
			<artifactId>jboss-rmi-client</artifactId>
			<version>${ejava.version}</version>
			<type>pom</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>ejava.common</groupId>
			<artifactId>ejava-util</artifactId>
			<version>${ejava.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- brings in JBoss HornetQ driver -->
        <dependency>
            <groupId>org.hornetq</groupId>
            <artifactId>hornetq-jms-client</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- runtime dependencies required to run JMS server instance -->
        <dependency>
            <groupId>org.jboss.microcontainer</groupId>
            <artifactId>jboss-kernel</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.hornetq</groupId>
            <artifactId>hornetq-bootstrap</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.hornetq</groupId>
            <artifactId>hornetq-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.hornetq</groupId>
            <artifactId>hornetq-jms</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.naming</groupId>
            <artifactId>jnpserver</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.netty</groupId>
            <artifactId>netty</artifactId>
            <scope>runtime</scope>
        </dependency>
		<!-- core project testing dependencies -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<!--tell the resource plugin to perform filtering on resources to fill 
			in JDBC URL, etc. -->
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
				<includes>
                    <include>**/hornetq*.xml</include>
                    <include>**/*.properties</include>
                </includes>
			</testResource>
			<testResource>
                <directory>src/test/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>**/hornetq*.xml</exclude>
                    <exclude>**/*.properties</exclude>
                </excludes>
            </testResource>
		</testResources>
		<plugins>
			<plugin>
				<artifactId>hibernate3-maven-plugin</artifactId>
				<groupId>org.codehaus.mojo</groupId>
				<configuration>
					<hibernatetool destdir="target/classes/ddl">
						<classpath>
							<path location="${project.build.directory}/test-classes" />
						</classpath>
						<jpaconfiguration persistenceunit="dutrowSalesDAO-test" />
					</hibernatetool>
				</configuration>
			</plugin>
			<!-- create a classpath for our JSE clients to run -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>${jms.classpath}</goal>
                        </goals>
                    </execution>
                 </executions>
                 <configuration>
                     <outputFile>target/test-classes/dependency-classpath</outputFile>
                 </configuration>
            </plugin>    
			<!-- allocate an unused port for the JMS server -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>reserve-network-port</goal>
                        </goals>
                        <configuration>
                            <portNames>
                                <portName>hornetq.remoting.netty.port</portName>
                                <portName>jndi.port</portName>
                                <portName>jndi.rmiport</portName>
                            </portNames>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
		</plugins>
	</build>

	<profiles>
		<!-- This profile and plugin is used to setup the DB in a known state prior 
			to running any of the tests within the DAO test cases. Note that this can 
			only run before the first test case and after the last test case. To run 
			in between test cases and testMethods, you will need to write a helper class 
			to read these DDL files and issue against the DB yourself. -->
		<profile>
			<id>gen-db</id>

			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>sql-maven-plugin</artifactId>

						<dependencies>
							<dependency>
								<groupId>com.h2database</groupId>
								<artifactId>h2</artifactId>
								<version>${h2db.version}</version>
							</dependency>
						</dependencies>

						<configuration>
							<username>${jdbc.user}</username>
							<password>${jdbc.password}</password>
							<driver>${jdbc.driver}</driver>
							<url>${jdbc.url}</url>
						</configuration>

						<executions>
							<execution>
								<id>drop-db-before-test</id>
								<phase>process-test-resources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<autocommit>true</autocommit>
									<fileset>
										<basedir>${basedir}/target</basedir>
										<includes>
											<include>classes/ddl/*drop.ddl</include>
										</includes>
									</fileset>
									<!-- the tables may not exist when tests are run -->
									<onError>continue</onError>
								</configuration>
							</execution>

							<execution>
								<id>create-db-before-test</id>
								<phase>process-test-resources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<autocommit>true</autocommit>
									<fileset>
										<basedir>${basedir}/target</basedir>
										<includes>
											<include>classes/ddl/*create.ddl</include>
										</includes>
									</fileset>
									<print>true</print>
								</configuration>
							</execution>

							<execution>
								<id>populate-db-before-test</id>
								<phase>process-test-resources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<autocommit>true</autocommit>
									<fileset>
										<basedir>${basedir}/target</basedir>
										<includes>
											<include>test-classes/ddl/*populate*.ddl</include>
										</includes>
									</fileset>
								</configuration>
							</execution>

							<!-- leave residue for post-test analysis <execution> <id>drop-db-after-test</id> 
								<phase>test</phase> <goals> <goal>execute</goal> </goals> <configuration> 
								<autocommit>true</autocommit> <fileset> <basedir>${basedir}/target</basedir> 
								<includes> <include>classes/ddl/*drop.ddl</include> </includes> </fileset> 
								</configuration> </execution> -->
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

        <!-- hide this plugin from Eclipse running it. It causes JMS servers to get spawned -->
        <profile>
	      <id>jms-server</id>
	      <activation>
	        <property>
	          <name>!m2e.version</name>
	        </property>
	      </activation>
	      <build>
                <plugins>
                    <!-- start/stop the JMS server during IT tests -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-jms-server</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <java classname="org.hornetq.integration.bootstrap.HornetQBootstrapServer" fork="true" spawn="${jms.spawn}">
                                             <classpath>
                                                 <path location="${project.build.directory}/test-classes/hornetq" />
                                                 <path refid="maven.runtime.classpath" />
                                             </classpath>
                                             <!--
                                             <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -Xnoagent" />
                                             <sysproperty key="java.compiler" value="NONE" />
                                             -->
                                             <sysproperty key="hornetq.config.dir" value="${project.build.directory}/test-classes/hornetq" />
                                             <arg value="${project.build.directory}/test-classes/hornetq/hornetq-beans.xml" />
                                        </java>
                                        <echo>started JMS Server</echo>
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-jms-server</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <echo>stopping JMS Server</echo>
                                        <echo file="${project.build.directory}/test-classes/hornetq/STOP_ME" />
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
	</profiles>


</project>

